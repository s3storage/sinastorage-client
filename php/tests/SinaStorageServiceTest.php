<?php
require('../SinaStorageService.php');
//require_once('../examples/conf.php');

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-19 at 16:45:15.
 */
class SinaStorageServiceTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var SinaStorageService
     */
    protected $object;
    protected $bafine;

    public static function setUpBeforeClass()
    {

    }

    public static function tearDownAfterClass()
    {
        // code...
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $conf = $this->getConf();
        $this->object = SinaStorageService::getInstance($conf['project'],
                $conf['accesskey'], $conf['secretkey']);
        $this->object->purgeParams();
        $this->object->purgeReq();
        $this->object->setAuth(true);
        $this->object->setCURLOPTs(array(CURLOPT_VERBOSE=>1));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function getConf()
    {
        $conf = array('project'=>'sandbox', 'accesskey'=>'SYS0000000000SANDBOX',
                 'secretkey'=>'1111111111111111111111111111111111111111');
        return $conf;
    }

    /**
     * @covers SinaStorageService::getInstance
     * @
     */
    public function testGetInstance()
    {
        $o = SinaStorageService::getInstance($project, $accesskey, $secretkey);
    }

    public function getHttpCode($result)
    {
        $statLine = explode( " ", $result,4);
        $httpCode = $statLine[1];

        return $httpCode;
    }

    /**
     * @covers SinaStorageService::uploadFile
     * @group uploadFile
     * @dataProvider uploadFileData
     */
    public function testUploadFile($localfile, $expected)
    {
        $fileType = mime_content_type( $localfile );
        $fileLength = filesize($localfile);
        $fileContent = "";

        $file_handle = fopen( $localfile , "r");
        while (!feof($file_handle)) {
            $fileContent = $fileContent.fread($file_handle,513);
        }
        fclose($file_handle);

        $file_sha1 = sha1($fileContent);
        $this->object->uploadFile("$localfile",$fileContent, $fileLength, $fileType, $result);
        $httpCode = $this->getHttpCode($result);

        $this->assertEquals( $expected, $httpCode);
    }

    public function uploadFileData()
    {
        //$allFile = $this->recurseFolder("file4UploadTest");

        return array(
            array( 'file4UploadTest/pas.txt', 200),
            array( 'file4UploadTest/afine.txt', 200)
        );
    }

    public function recurseFolder($directory)
    {
        $allFile = array();
        if( substr($directory,-1,1) != "/" ){
            $directory = "$directory/";
        }

        if( is_file( $directory )) {
            throw new exception("Argument of recurseFolder() should be a string specifying a path");
        }else{
            $mydir=dir($directory);
            while( $file=$mydir->read()){
                if (($file!=".") AND ($file!="..") And ($file!= ".svn" ) And ($file!= ".git" )) {
                    if (!is_file($directory.$file)) {
                        echo $directory.$file." is not a file.\n";
                        continue;
                    }
                    array_push($allFile, "$directory$file");
                }
            }
            $mydir->close();
        }
        return $allFile;
    }

    /**
     * @covers SinaStorageService::uploadFileRelax
     * @todo   Implement testUploadFileRelax().
     */
    public function testUploadFileRelax()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::copyFile
     * @group copyFile
     * @dataProvider copyFileData
     */
    public function testCopyFile($src,$expected)
    {
        $dest = "copied/".array_pop(explode("/",$src,2));
        $this->object->copyFile($dest, $src, $result);
        $httpCode = $this->getHttpCode($result);
        $this->assertEquals($expected, $httpCode);
    }

    public function copyFileData()
    {
        return array(
            array( 'file4UploadTest/pas.txt', 200),
            array( 'file4UploadTest/afine.txt', 200)
        );
    }
    /**
     * @covers SinaStorageService::copyFileBetweenProject
     * @group copyFileBetweenProject
     */
    // create a function provide file uploaded in project
    // because some tests require precondition that some files in server.
    public function testCopyFileBetweenProject()
    {

    }

    public function copyFileBetweenProjectData()
    {
        return array(
            array( 'file4UploadTest/pas.txt', 200),
            array( 'file4UploadTest/afine.txt', 200)
        );
    }
    /**
     * @covers SinaStorageService::getFile
     * @group getFile
     * @dataProvider getFileData
     */
    public function testGetFile( $filename, $ip, $expected)
    {
        $this->object->setCURLOPTs(array(CURLOPT_HEADER=>1));
        if ( $ip ) {
            $this->object->setExtra("?ip=$ip");
        }

        $this->object->getFile( $filename, $result );
        $httpCode = $this->getHttpCode($result);
        $this->assertEquals( $expected, $httpCode);
    }

    public function getFileData()
    {
        $friend = "/file_uploaded/birth.txt";
        return array(
            array( $friend, '', 200),
            //array( '/file_uploaded/birth.txt', '', 200),
            array( '/file_uploaded/nnn3.txt', '', 200),
            array( 'foo/bar/1.html', '219.142.118.237', 200),
            array( 'foo/bar/1.html', '229.152.128.247', 403),
            array( 'nonexistfile.html', '', 404),
            array( 'foo/bar/1.html', '', 200)
       );
    }

    public function basicData()
    {
        return array(
            array( '/file_uploaded/birth.txt', 200),
            array( '/file_uploaded/nnn3.txt', 200),
            array( 'foo/bar/1.html', 200),
            array( 'nonexistfile.html', 404),
            array( 'foo/bar/1.html', 200)
       );
    }

    /**
     * @covers SinaStorageService::getFileUrl
     * @group getFileUrl
     * @dataProvider getFileUrlData
     */
    public function testGetFileUrl($file, $ip, $expected)
    {
        if ( $ip ) {
            $this->object->setExtra("?ip=$ip");
        }

        $this->object->getFileUrl($file, $result);

        $c = curl_init();
        curl_setopt($c, CURLOPT_URL, $result);
        curl_setopt($c, CURLOPT_CUSTOMREQUEST, "GET");
        curl_setopt($c, CURLOPT_HEADER, 1);
        curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($c, CURLOPT_TIMEOUT, 3);

        $c_result = curl_exec($c);
        $c_info = curl_getinfo($c);

        curl_close($c);

        $this->assertEquals($expected, $c_info['http_code']);
    }

    public function getFileUrlData()
    {
        return array(
            array("foo/bar/1.html", "", 200),
            array("foo/bar/1.html", "219.142.118.237", 200),
            array("foo/bar/1.html", "229.152.128.247", 403),
            array("nonexistfile.html", "", 404),
            array("foo/bar/1.html", "", 200)
        );
    }

    /**
     * @covers SinaStorageService::deleteFile
     * @group deleteFile
     * @dataProvider deleteFileData
     */
    public function testDeleteFile( $file, $expected)
    {
        $this->object->setCURLOPTs(array(CURLOPT_HEADER=>1));
        $this->object->deleteFile( $file, $result);
        $httpCode = $this->getHttpCode($result);

        $this->assertEquals( $expected, $httpCode);
    }

    public function deleteFileData()
    {
        return array(
            array( 'file4UploadTest/pas.txt', 204),
            array( 'file4UploadTest/afine.txt', 204)
        );
    }

    /**
     * @covers SinaStorageService::getMeta
     * @group getMeta
     * @dataProvider basicData
     */
    public function testGetMeta($file, $expected)
    {
        $this->object->setCURLOPTs(array(CURLOPT_HEADER=>1));
        $this->object->getMeta($file,$result);
        $httpCode = $this->getHttpCode($result);
        $this->assertEquals($expected,$httpCode);
    }

    /**
     * @covers SinaStorageService::updateMeta
     * @group updateMeta
     * @dataProvider basicData
     */
    public function testUpdateMeta($file,$expected)
    {
        $this->object->setCURLOPTs(array(CURLOPT_HEADER=>1));
        $this->object->setRequestHeaders(array("x-sina-info-int"=>33,"x-sina-info"=>"testing_$file"));
        $this->object->updateMeta($file, $result);
        $httpCode = $this->getHttpCode($result);

        $this->assertEquals($expected, $httpCode);
    }

    /**
     * @covers SinaStorageService::getFileList
     * @group getFileList
     */
    public function testGetFileList()
    {
        $this->object->setCURLOPTs(array(CURLOPT_HEADER=>1));
        $this->object->getFileList($result);
        $httpCode = $this->getHttpCode($result);
        $this->assertEquals(200,$httpCode);
    }

    /**
     * @covers SinaStorageService::listFiles
     * @group listFiles
     * @dataProvider listFilesData
     */
    public function testListFiles($marker, $pageeach)
    {
        /**
         * $this->object->setCURLOPTs(array(CURLOPT_HEADER=>1));
         * listFiles() function return a json-decoded value,
               ignoring whether CURLOPT_HEADER is set,so cannot receive
               the respond header.
         */
        $result = $this->object->listFiles($marker, $pageeach, "");

        $this->assertEquals($marker, $result["Marker"]);
        $this->assertGreaterThan($marker, $result["Contents"][0]["Name"]);
        $this->assertEquals($pageeach, $result["ContentsQuantity"]);
    }

    public function listFilesData()
    {
        return array(
            array( 'foo/bar/1.html', 10, 200),
            array( 'file4UploadTest/afine.txt', 5, 200)
        );
    }
    /**
     * @covers SinaStorageService::setAuth
     * @todo   Implement testSetAuth().
     */
    public function testSetAuth()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setExpires
     * @todo   Implement testSetExpires().
     */
    public function testSetExpires()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setExtra
     * @todo   Implement testSetExtra().
     */
    public function testSetExtra()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setQueryStrings
     * @todo   Implement testSetQueryStrings().
     */
    public function testSetQueryStrings()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setRequestHeaders
     * @todo   Implement testSetRequestHeaders().
     */
    public function testSetRequestHeaders()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setCURLOPTs
     * @todo   Implement testSetCURLOPTs().
     */
    public function testSetCURLOPTs()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setTimeout
     * @todo   Implement testSetTimeout().
     */
    public function testSetTimeout()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setDomain
     * @todo   Implement testSetDomain().
     */
    public function testSetDomain()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::getCURLOPTs
     * @todo   Implement testGetCURLOPTs().
     */
    public function testGetCURLOPTs()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::purgeParams
     * @todo   Implement testPurgeParams().
     */
    public function testPurgeParams()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::purgeReq
     * @todo   Implement testPurgeReq().
     */
    public function testPurgeReq()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
