<?php
require('../SinaStorageService.php');

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-07-19 at 16:45:15.
 */
class SinaStorageServiceTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var SinaStorageService
     */
    protected $object;

    public static function setUpBeforeClass()
    {
       //echo $this->object;
    }

    public static function tearDownAfterClass()
    {
        // code...
    }

    public function conf()
    {
        return array(
            array('sandbox', 'SYS0000000000SANDBOX', '1111111111111111111111111111111111111111')
        );
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = SinaStorageService::getInstance('sandbox', 'SYS0000000000SANDBOX', '1111111111111111111111111111111111111111');
        $this->object->purgeParams();
        $this->object->purgeReq();
        $this->object->setAuth(true);
        $this->object->setCURLOPTs(array(CURLOPT_VERBOSE=>1));

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers SinaStorageService::getInstance
     * @
     */
    public function testGetInstance()
    {
        $o = SinaStorageService::getInstance($project, $accesskey, $secretkey);
    }

    /**
     * @covers SinaStorageService::uploadFile
     * @group uploadFile
     * @dataProvider uploadFileData
     */
    public function testUploadFile($localfile)
    {
        $file_type = mime_content_type( $localfile );
        $file_length = filesize($localfile);
        $file_content = ""; 
        $file_handle = fopen( $localfile , "r");
        while (!feof($file_handle)) {
            $file_content = $file_content.fread($file_handle,513);
        }
        fclose($file_handle);

        $file_sha1 = sha1($file_content);

        $this->object->uploadFile("foo/bar/$localfile",$file_content, $file_length, $file_type, $result);
        echo "\n".$result."\n";
        //echo $localfile;
        //var_dump($o->uploadFile("foo/bar/$localfile",$file_content, $file_length, $file_type, $result));
    }

    /**
     * @group uploadFile
     * @depends readFolder
     */
    public function uploadFileData($fileArr)
    {
        /*
        $folderPath = "file4UploadTest";
        $fileArr = array();
        $mydir = dir($folderPath);
        while($file = $mydir->read())
        {
            if (is_file($file)) {
                $fileArr[] = array($file);
            }else{
                throw new exception("What in this folder should be file.");
            }
        }
        return $fileArr;
        */

     return array(
            array( 'file4UploadTest/pas.php'),
            array( 'file4UploadTest/afine.txt')
       );

    }

    /**
     * @covers SinaStorageService::uploadFileRelax
     * @todo   Implement testUploadFileRelax().
     */
    public function testUploadFileRelax()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::copyFile
     * @todo   Implement testCopyFile().
     */
    public function testCopyFile()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::copyFileBetweenProject
     * @todo   Implement testCopyFileBetweenProject().
     */
    public function testCopyFileBetweenProject()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::getFile
     * @group getFile
     * @dataProvider getFileData
     */
    public function testGetFile( $filename, $ip, $expected)
    {
        $this->object->setCURLOPTs(array(CURLOPT_HEADER=>1));
        if ( $ip ) {
            $this->object->setExtra("?ip=$ip");
        }

        $this->object->getFile( $filename, $result );
        $stat_line = explode( " ", $result, 4);
        $http_code = $stat_line[1];
        $this->assertEquals( $expected, $http_code);
    }

    /**
     * @group getFile
     */
    public function getFileData()
    {
        return array(
            array( '/file_uploaded/birth.txt', '', 200),
            array( '/file_uploaded/nnn3.txt', '', 200),
            array( 'foo/bar/1.html', '219.142.118.237', 200),
            array( 'foo/bar/1.html', '229.152.128.247', 403),
            array( 'nonexistfile.html', '', 404),
            array( 'foo/bar/1.html', '', 200)
       );
    }

    /**
     * @covers SinaStorageService::getFileUrl
     * @group getFileUrl
     * @dataProvider getFileUrlData
     */
    public function testGetFileUrl($file, $ip, $expected)
    {
        if ( $ip ) {
            $this->object->setExtra("?ip=$ip");
        }

        $this->object->getFileUrl($file, $result);

        $c = curl_init();
        curl_setopt($c, CURLOPT_URL, $result);
        curl_setopt($c, CURLOPT_CUSTOMREQUEST, "GET");
        curl_setopt($c, CURLOPT_HEADER, 1);
        curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($c, CURLOPT_TIMEOUT, 3);

        $c_result = curl_exec($c);
        $c_info = curl_getinfo($c);

        curl_close($c);

        $this->assertEquals($expected, $c_info['http_code']);
    }

    /**
     * @group getFileUrl
     */
    public function getFileUrlData()
    {
        return array(
            array("foo/bar/1.html", "", 200),
            array("foo/bar/1.html", "219.142.118.237", 200),
            array("foo/bar/1.html", "229.152.128.247", 403),
            array("nonexistfile.html", "", 404),
            array("foo/bar/1.html", "", 200)
        );
    }

    /**
     * @covers SinaStorageService::deleteFile
     * @todo   Implement testDeleteFile().
     */
    public function testDeleteFile()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::getMeta
     * @todo   Implement testGetMeta().
     */
    public function testGetMeta()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::updateMeta
     * @todo   Implement testUpdateMeta().
     */
    public function testUpdateMeta()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::getFileList
     * @todo   Implement testGetFileList().
     */
    public function testGetFileList()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::listFiles
     * @todo   Implement testListFiles().
     */
    public function testListFiles()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setAuth
     * @todo   Implement testSetAuth().
     */
    public function testSetAuth()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setExpires
     * @todo   Implement testSetExpires().
     */
    public function testSetExpires()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setExtra
     * @todo   Implement testSetExtra().
     */
    public function testSetExtra()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setQueryStrings
     * @todo   Implement testSetQueryStrings().
     */
    public function testSetQueryStrings()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setRequestHeaders
     * @todo   Implement testSetRequestHeaders().
     */
    public function testSetRequestHeaders()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setCURLOPTs
     * @todo   Implement testSetCURLOPTs().
     */
    public function testSetCURLOPTs()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setTimeout
     * @todo   Implement testSetTimeout().
     */
    public function testSetTimeout()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::setDomain
     * @todo   Implement testSetDomain().
     */
    public function testSetDomain()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::getCURLOPTs
     * @todo   Implement testGetCURLOPTs().
     */
    public function testGetCURLOPTs()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::purgeParams
     * @todo   Implement testPurgeParams().
     */
    public function testPurgeParams()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SinaStorageService::purgeReq
     * @todo   Implement testPurgeReq().
     */
    public function testPurgeReq()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
